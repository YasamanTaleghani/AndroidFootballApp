package ir.miare.androidcodechallenge.di

import android.util.Log
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import ir.logicbase.mockfit.MockFitConfig
import ir.logicbase.mockfit.MockFitInterceptor
import ir.miare.androidcodechallenge.ui.RankingFragment
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.jackson.JacksonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object RemoteModule {

    @Provides
    @Singleton
    fun provideGsonConverterFactory(): JacksonConverterFactory = JacksonConverterFactory.create()

    @Provides
    fun getFragment(): RankingFragment = RankingFragment()

    @Provides
    @Singleton
    fun provideNetworkService() : Retrofit {
        return Retrofit.Builder()
            .baseUrl("https://test_baseurl.com/v2/")
            .addConverterFactory(provideGsonConverterFactory())
            .client(
                OkHttpClient.Builder()
                    .addInterceptor(
                        MockFitInterceptor(
                            bodyFactory = { input -> getFragment().resources.assets.open(input) },
                            logger = { tag, message -> Log.d(tag, message) },
                            baseUrl = "https://test_baseurl.com/v2/",
                            requestPathToMockPathRule = MockFitConfig.REQUEST_TO_JSON, // autogenerated constant, just press build button
                            mockFilesPath = "",
                            mockFitEnable = true,
                            apiEnableMock = true,
                            apiIncludeIntoMock = arrayOf(),
                            apiExcludeFromMock = arrayOf(),
                            apiResponseLatency = 1000L
                        )
                    )
                    .connectTimeout(20, TimeUnit.SECONDS)
                    .writeTimeout(20, TimeUnit.SECONDS)
                    .readTimeout(20, TimeUnit.SECONDS)
                    .build()
            ).build()
    }
}