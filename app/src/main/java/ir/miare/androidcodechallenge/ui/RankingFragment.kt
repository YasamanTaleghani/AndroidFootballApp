package ir.miare.androidcodechallenge.ui

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.RadioGroup
import androidx.recyclerview.widget.LinearLayoutManager
import dagger.hilt.android.AndroidEntryPoint
import ir.logicbase.mockfit.MockFitConfig
import ir.logicbase.mockfit.MockFitInterceptor
import ir.miare.androidcodechallenge.R
import ir.miare.androidcodechallenge.data.model.FakeData
import ir.miare.androidcodechallenge.data.repository.RemoteRankingRepository
import ir.miare.androidcodechallenge.databinding.FragmentRankingBinding
import ir.miare.androidcodechallenge.ui.base.PlayerAdapter
import ir.miare.androidcodechallenge.ui.base.TeamAdapter
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.jackson.JacksonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import kotlin.concurrent.thread

@AndroidEntryPoint
class RankingFragment : Fragment() {

    private lateinit var binding: FragmentRankingBinding
    @Inject lateinit var viewModel: RankingViewModel
    private lateinit var teamAdapter: TeamAdapter
    private lateinit var playerAdapter: PlayerAdapter

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val view = inflater.inflate(R.layout.fragment_ranking, container, false)
        binding = FragmentRankingBinding.bind(view)
        binding.pbLoading.hide()
        return view
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.pbLoading.show()
        initRecyclerView()
        getRanking()

    }

    private fun initRecyclerView() {
        binding.recyclerView.setHasFixedSize(true)
        binding.recyclerView.layoutManager = LinearLayoutManager(activity)
        teamAdapter = TeamAdapter()
        playerAdapter = PlayerAdapter()
        binding.recyclerView.adapter = teamAdapter
    }

    private fun setTeamAdapter(list: ArrayList<FakeData> = arrayListOf()) {
        teamAdapter.setGame(list)
        binding.recyclerView.adapter = teamAdapter
    }

    private fun setPlayerAdapter(list: ArrayList<FakeData> = arrayListOf()) {
        playerAdapter.setPlayers(list)
        binding.recyclerView.adapter = playerAdapter
    }

    private fun setUpView() {
        binding.groupButton.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, checkedId ->
            when (checkedId) {
                R.id.none -> setTeamAdapter(viewModel.getRankingSortedList(-1))
                R.id.team_and_leagues -> setTeamAdapter(viewModel.getRankingSortedList(0))
                R.id.most_goals -> setPlayerAdapter(viewModel.getRankingSortedList(1))
                R.id.average_goal -> setTeamAdapter(viewModel.getRankingSortedList(2))
            }
        })
    }

    private fun provideNetworkService() : Retrofit {
        return Retrofit.Builder()
            .baseUrl("https://test_baseurl.com/v2/")
            .addConverterFactory(JacksonConverterFactory.create())
            .client(
                OkHttpClient.Builder()
                    .addInterceptor(
                        MockFitInterceptor(
                            bodyFactory = { input -> this.resources.assets.open(input) },
                            logger = { tag, message -> Log.d(tag, message) },
                            baseUrl = "https://test_baseurl.com/v2/",
                            requestPathToMockPathRule = MockFitConfig.REQUEST_TO_JSON, // autogenerated constant, just press build button
                            mockFilesPath = "",
                            mockFitEnable = true,
                            apiEnableMock = true,
                            apiIncludeIntoMock = arrayOf(),
                            apiExcludeFromMock = arrayOf(),
                            apiResponseLatency = 1000L
                        )
                    )
                    .connectTimeout(20, TimeUnit.SECONDS)
                    .writeTimeout(20, TimeUnit.SECONDS)
                    .readTimeout(20, TimeUnit.SECONDS)
                    .build()
            ).build()
    }

    private fun getRanking() {
        val retrofit = provideNetworkService()
        val fakeData: ArrayList<FakeData> = arrayListOf()
        thread(name = "NetworkWorker") {
            retrofit.create(RemoteRankingRepository.Api::class.java).getData().enqueue(object : Callback<List<FakeData>> {
                override fun onResponse(
                    call: Call<List<FakeData>>,
                    response: Response<List<FakeData>>
                ) {
                    val data = response.body()!!
                    fakeData.addAll(data)
                    viewModel.fakeData.addAll(data)
                    if (viewModel.fakeData.size > 0) {
                        binding.pbLoading.hide()
                    }
                    teamAdapter.setGame(viewModel.fakeData)
                    setUpView()
                }
                override fun onFailure(call: Call<List<FakeData>>, t: Throwable) {
                    t.printStackTrace()
                }
            })
        }
    }
}